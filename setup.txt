Backend :-

npm init -y

npm i express cors dotenv cookie-parser date-fns bcrypt jsonwebtoken passport passport-jwt mongoose qrcode resend speakeasy uuid zod 

Dev-dependencies + ts;

npm i @types/bcrypt @types/dotenv @types/cors @types/cookie-parser @types/express @types/jsonwebtoken @types/mongoose @types/passport @types/passport-jwt @types/qrcode @types/speakeasy ts-node-dev typescript

command to create ts.config.json => npx tsc --init 

setup package.json + ts.config.json

"server":"ts-node-dev --files ./src/server.ts",
"build":"tsc && cp ./package.json ./dist",
"start":"node dist/server.js"

now modify the ts.config.json file {
    target,es2023
    rootDir"./src,
    outDir:"./dist,
    add these two things
     "include": ["src/**/*.ts", "@types"],
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}


// middleware setup 

asyncHandler() for controllers / routes
errorHandler() for getting what kind of error is;

// we have to setup certain things for make our work easy and have proper error and type of error handling;

=> suppose many time .env file not works properly , not give the value correctly so we need a way to handle this in all senairios,

so we make first the utility function getEnviouments which take two params key, defaulvalue ok based on that it gives us the value always;

so using this function we setup the app.config.ts file ok

// now there are many types of errors in backend terms so ham har baar sabhi ko remember or correctly nhi us kr pate to hme ek centralize chij setup krni hogi ok;

first we make enum like all of the types or error occured;
secodn we make the http.config.ts file in which we setup the statusCode for all types of errors and return HTTPSTATUS and HttpsStatusCode type so that we use these in AppError class and also in setup of errorHandler for AppError class ok;

ðŸ”´now our work to setup the routes;


//Some myths about new Schema() vs new mongoose.Schema()

Both are the same ok, have same features, methods, etc.

userId : mongoose.Schema.Types.ObjectId => we do this in verification code model to stablish a relation b/w code model and user model,

 userId:{
        type:mongoose.Schema.Types.ObjectId,
        ref:"User", // pointing to that User model
        required:true,
        index:true
      } 

Indexes in MongoDB are used to improve the efficiency of queries. When you set index: true for a field, Mongoose instructs MongoDB to create an index on that field. This makes searches, sorts, and other operations involving that field faster.


code: {
    type: String,
    required: true,
    unique: true,
    default: generateUniqueCodes, // generate unique codes;
},

Mongoose Model Definition with Collection Name
=> means jab user khud ko register karega tab usko liye  ek alag se verification code ki collection create ho jygi jisme code hoga for verify that email, or reset-password ok


//User registered successfuly ok;

//=> Login user (Here comes the main stuff):-

// sabse phle hme user ke credentials ko check and verify krna hai ok,
then hme us user ke liye using  that userid session collection create krni hai, ab jab jab user har bar login krega uske liye new session create hoge ya old wale verify hoge sayd;

// ab hme based on userId and sessionID user ke liye accesstoken and refresh token create krne hai or unhe har request pe fir verify bhi krna hai 

//after creating this all stuff hme tokens ko cookies me store krna hai ;

we create the one seprate file which contain all things like methods for set cookies and delete cookies including types, and options for cookies.



// verify-user-email:-

first we get the code fromn the req.body; and also verify that code using the verificationschema ok;

now firts we check code is valid; so we findOne code on the verificationModel collection ok , based on code, type, exires.

Note how Here code expritaion works;
on register user time we set the exires time for code is 45 minutes ok
now when we find the document using that code, type and expires we simley put logic like

{$gt : new Date()} => means only us documnet ko retun kro jiska time ab se 45 minutes or current time se jyada ho basicalyy;

// now we have to find user using userId present in code and update the field isEamailVerifed and also doing {new : true} so updated document reflects immidiatly;

after all stuff we simpley await validcode.deleteOne() clear from collection ok
























details about cookie :-
options:[
  maxAge : how long the cookie should be lived (life),
  expires: exact time when cookis is expires,
           httpOnly: means cookie is not accessible with javascript,which is best for securty purpose, always do it,
  secure: as we know cookie is send with every request to server, so   by enable it cookie is send only over HTTPS (secure protocol) not     over HTTP ok;

  samesite: cookies are sent with cross-site request,cors, useful for preventing CSRF attacks :- types are ,
      "strict" : cookies sent only for same site,
      "lax": cookies sent for top level navigation (GET request),
      "none": cookies sent for all request,
  
  path: defines the URL path for which the cookie is valid, eg: /admin,

  domain: specify the domain for which the cookie is valid.This allow sub domain to share cookies eg: example.com,

  signed: when set to true, the cookies is signed using the secret key for added integrity.This works with cookie-parser siging functionality.
]













//@types stuff for logout
The @types folder is typically used in a TypeScript project to define custom type declarations for third-party libraries or specific application structures. In this case, the types.d.ts file expands the default type definitions of the Express framework to include custom properties and interfaces specific to your application. Here's what this particular file does:

Breakdown of the Code
import { UserDocument } from "../models/userModel";
import { Request } from "express";

declare global {
  namespace Express {
    interface User extends UserDocument {}
    interface Request {
      sessionId?: string;
    }
  }
}


1. Global Declaration Scope
The declare global statement allows you to augment or modify global type definitions. In this case, you're extending the Express namespace, which is a part of the Express framework's type definitions.

2. Extending Express.User Interface
interface User extends UserDocument {}


- What It Does:- This line extends the Express.User interface to inherit from the UserDocument type.
- UserDocument likely comes from your userModel, and it defines the shape of a user object in your database (e.g., properties like name, email, password, etc.).

- Why It's Useful:- You can now use req.user (available via Passport.js or similar middleware) in your application with the properties defined in UserDocument. This improves type safety by allowing IntelliSense and compile-time checks.



3. Adding sessionId to Express.Request
interface Request {
  sessionId?: string;
}


- What It Does:- This line adds the optional sessionId property to the Express.Request interface.
- sessionId might represent the unique identifier of a user session stored in your database.

- Why It's Useful:- This enables you to attach a sessionId to the request object dynamically during middleware or route handling.
- TypeScript will recognize req.sessionId as a valid property, reducing the chance of runtime errors.



Purpose of the types.d.ts File
- Custom Typing: Extends third-party type definitions (like Express) to include application-specific types.
- Type Safety: Ensures type safety across your application, helping you write more reliable and maintainable code.
- Centralized Typing: Provides a central location for all custom type definitions, making it easier to manage and update them.


Best Practices
- Place your types.d.ts file inside an @types folder or another dedicated folder like src/types for clarity.
- Ensure your tsconfig.json includes the @types folder in the include or typeRoots option, so TypeScript can pick up the custom types.


With this setup, your application achieves tighter integration between Express and your data models while ensuring type safety for commonly accessed properties like req.user and req.sessionId. Let me know if you'd like further clarification or practical examples! ðŸ˜„



ðŸ”´ðŸ”´ðŸ”´ But Logout thing is still not done yet :- Now we have to setup the strategy from passport-jwt

// we have to make one setupJwtStrategy function and one initializer function

// we have to setup the user service (find user by id)

//we have to setup the passport middleware by calling that function setupJwtStrategy and export default passport;

// we have to import that passport into our main server.ts file; and initialize and setup it as middleware;


secretOrKey is a string or buffer containing the secret (symmetric) or PEM-encoded public key (asymmetric) for verifying the token's signature. REQUIRED unless secretOrKeyProvider is provided.
secretOrKeyProvider is a callback in the format function secretOrKeyProvider(request, rawJwtToken, done), which should call done with a secret or PEM-encoded public key (asymmetric) for the given key and request combination. done accepts arguments in the format function done(err, secret). Note it is up to the implementer to decode rawJwtToken. REQUIRED unless secretOrKey is provided.
jwtFromRequest (REQUIRED) Function that accepts a request as the only parameter and returns either the JWT as a string or null. See Extracting the JWT from the request for more details.
issuer: If defined the token issuer (iss) will be verified against this value.
audience: If defined, the token audience (aud) will be verified against this value.
algorithms: List of strings with the names of the allowed algorithms. For instance, ["HS256", "HS384"].
ignoreExpiration: if true do not validate the expiration of the token.
passReqToCallback: If true the request will be passed to the verify callback. i.e. verify(request, jwt_payload, done_callback).
jsonWebTokenOptions: passport-jwt is verifying the token using jsonwebtoken. Pass here an options object for any other option you can pass the jsonwebtoken verifier. (i.e maxAge)
verify is a function with the parameters verify(jwt_payload, done)

jwt_payload is an object literal containing the decoded JWT payload.
done is a passport error first callback accepting arguments done(error, user, info)


Use passport.authenticate() specifying 'JWT' as the strategy.




// Some talks about .populate(), .select method of mongoose

=> remember whne we are making the verification or session models we simpley write some thing like ref:["User"] in the userId ok;

so in getting the current session using sessionId we find our session well ok, but it contains only the userId , now we have to return the full user object based on that id, we have two option here one is simpley fetch based on userid from usermodel and second one is .populate("userId") 

=>- The populate method is used in Mongoose to replace a reference field (like userId) in the document with the actual - The populate method is used in Mongoose to replace a reference field (like userId) in the document with the actual - The populate method is used in Mongoose to replace a reference field (like userId) in the document with the actual 

 
.select("expiresAt") means we exclude (not involve oor bhaar feek do) the expiresAt filed from the session object;ok


// some important talks about axios;

Interceptors => they are used to handle request,response before going to .then.catch;

api.interceptors.request.use vs api.interceptors.response.use

.) This runs before the request is sent.
   Used for:
    Adding auth tokens to headers
    Logging requests
    Setting common headers

.) This runs after a response is received.
   Used for:
    Logging responses
    Global error handling (like catching 401)
    Retrying failed requests
    Token refreshing